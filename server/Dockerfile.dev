# Use a specific version for reproducibility
FROM rust:1.87-alpine AS base

# Install system dependencies required for building and running
RUN apk add --no-cache \
    build-base \
    pkgconfig \
    openssl-dev \
    postgresql-dev \
    libpq-dev \
    musl-dev

# Set up the working directory
WORKDIR /app

# Install cargo-watch for hot-reloading
RUN cargo install cargo-watch

# --- Builder Stage ---
FROM base AS builder

# Copy only the necessary files to cache dependencies
COPY Cargo.toml Cargo.lock ./
COPY server/Cargo.toml ./server/
COPY domains/user/models/Cargo.toml ./domains/user/models/
COPY domains/user/dao/Cargo.toml ./domains/user/dao/
COPY domains/user/commands/Cargo.toml ./domains/user/commands/
COPY domains/user/queries/Cargo.toml ./domains/user/queries/
COPY domains/user/http/Cargo.toml ./domains/user/http/
COPY domains/events/models/Cargo.toml ./domains/events/models/
COPY domains/events/dao/Cargo.toml ./domains/events/dao/
COPY domains/events/commands/Cargo.toml ./domains/events/commands/
COPY domains/events/queries/Cargo.toml ./domains/events/queries/
COPY domains/events/http/Cargo.toml ./domains/events/http/
COPY domains/analytics/Cargo.toml ./domains/analytics/
COPY domains/analytics/http/Cargo.toml ./domains/analytics/http/
COPY libs/persistence/database_traits/Cargo.toml ./libs/persistence/database_traits/
COPY libs/persistence/sql_connection/Cargo.toml ./libs/persistence/sql_connection/
COPY libs/persistence/redis_connection/Cargo.toml ./libs/persistence/redis_connection/
COPY libs/domain/Cargo.toml ./libs/domain/
COPY libs/test-utils/Cargo.toml ./libs/test-utils/
COPY libs/seeders/Cargo.toml ./libs/seeders/
COPY binaries/migrator/Cargo.toml ./binaries/migrator/
COPY binaries/seeder/Cargo.toml ./binaries/seeder/

# Create dummy main.rs files to allow dependency caching
RUN mkdir -p server/src && echo "fn main() {}" > server/src/main.rs
RUN mkdir -p domains/user/models/src && echo "pub fn lib() {}" > domains/user/models/src/lib.rs
RUN mkdir -p domains/user/dao/src && echo "pub fn lib() {}" > domains/user/dao/src/lib.rs
RUN mkdir -p domains/user/commands/src && echo "pub fn lib() {}" > domains/user/commands/src/lib.rs
RUN mkdir -p domains/user/queries/src && echo "pub fn lib() {}" > domains/user/queries/src/lib.rs
RUN mkdir -p domains/user/http/src && echo "pub fn lib() {}" > domains/user/http/src/lib.rs
RUN mkdir -p domains/events/models/src && echo "pub fn lib() {}" > domains/events/models/src/lib.rs
RUN mkdir -p domains/events/dao/src && echo "pub fn lib() {}" > domains/events/dao/src/lib.rs
RUN mkdir -p domains/events/commands/src && echo "pub fn lib() {}" > domains/events/commands/src/lib.rs
RUN mkdir -p domains/events/queries/src && echo "pub fn lib() {}" > domains/events/queries/src/lib.rs
RUN mkdir -p domains/events/http/src && echo "pub fn lib() {}" > domains/events/http/src/lib.rs
RUN mkdir -p domains/analytics/src && echo "pub fn lib() {}" > domains/analytics/src/lib.rs
RUN mkdir -p domains/analytics/http/src && echo "pub fn lib() {}" > domains/analytics/http/src/lib.rs
RUN mkdir -p libs/persistence/database_traits/src && echo "pub fn lib() {}" > libs/persistence/database_traits/src/lib.rs
RUN mkdir -p libs/persistence/sql_connection/src && echo "pub fn lib() {}" > libs/persistence/sql_connection/src/lib.rs
RUN mkdir -p libs/persistence/redis_connection/src && echo "pub fn lib() {}" > libs/persistence/redis_connection/src/lib.rs
RUN mkdir -p libs/domain/src && echo "pub fn lib() {}" > libs/domain/src/lib.rs
RUN mkdir -p libs/test-utils/src && echo "pub fn lib() {}" > libs/test-utils/src/lib.rs
RUN mkdir -p libs/seeders/src && echo "pub fn lib() {}" > libs/seeders/src/lib.rs
RUN mkdir -p binaries/migrator/src && echo "fn main() {}" > binaries/migrator/src/main.rs
RUN mkdir -p binaries/seeder/src && echo "fn main() {}" > binaries/seeder/src/main.rs

# Build dependencies
RUN cargo build --workspace --bins --exclude benchmarks

# --- Development Stage ---
FROM builder AS development

# Copy the rest of the source code
COPY . .

# Expose the application port
EXPOSE 8080

# Set the entrypoint to run the application with hot-reloading
CMD ["cargo", "watch", "-x", "run", "--bin", "collider"]
services:
  # PostgreSQL Database
  postgres:
    build:
      context: ./infrastructure/config/configs/postgres
      dockerfile: Dockerfile
    container_name: collider_postgres_dev
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/config/configs/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - collider
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Dragonfly Cache (Redis-compatible)
  dragonfly:
    image: docker.dragonflydb.io/dragonflydb/dragonfly:v1.25.1
    container_name: collider_dragonfly_dev
    ports:
      - "6379:6379"
    volumes:
      - dragonfly_data:/data
    command: dragonfly --logtostderr --maxmemory=1gb --cache_mode=true --proactor_threads=2
    networks:
      - collider
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 5s

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: collider_prometheus_dev
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/config/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - collider

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: collider_grafana_dev
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/config/monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - collider
    depends_on:
      - prometheus

  # Jaeger Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: collider_jaeger_dev
    environment:
      COLLECTOR_OTLP_ENABLED: true
      SPAN_STORAGE_TYPE: memory
      MEMORY_MAX_TRACES: 50000
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector HTTP
      - "6831:6831/udp"  # Jaeger agent UDP
    volumes:
      - jaeger_data:/badger
    networks:
      - collider

  # Nginx Reverse Proxy (optional, matches production setup)
  nginx:
    image: nginx:alpine
    container_name: collider_nginx_dev
    ports:
      - "80:80"
    volumes:
      - ./infrastructure/config/configs/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - collider
    profiles:
      - full  # Only start with --profile full

volumes:
  postgres_data:
    driver: local
  dragonfly_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  jaeger_data:
    driver: local
  cargo_registry:
    driver: local
  cargo_target:
    driver: local

networks:
  collider:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
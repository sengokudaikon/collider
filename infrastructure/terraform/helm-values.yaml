# Collider Helm Values Template
# Dynamically generated by Terraform for each environment

global:
  environment: ${environment}
  imageRegistry: ${image_registry}

# PostgreSQL Configuration
postgres:
  enabled: true
  image:
    repository: postgres
    tag: "16-alpine"
    pullPolicy: IfNotPresent
  
  auth:
    username: postgres
    password: ${postgres_password}
    database: events
  
  persistence:
    enabled: true
    %{ if environment == "local" }
    size: 5Gi
    storageClass: "local-path"
    %{ else }
    size: 50Gi
    storageClass: "standard-rwo"
    %{ endif }
    accessModes:
      - ReadWriteOnce
  
  resources:
    %{ if environment == "local" }
    limits:
      cpu: "1"
      memory: "2Gi"
    requests:
      cpu: "0.5"
      memory: "1Gi"
    %{ else }
    limits:
      cpu: "2"
      memory: "4Gi"
    requests:
      cpu: "1"
      memory: "2Gi"
    %{ endif }
  
  config:
    %{ if environment == "local" }
    maxConnections: 100
    sharedBuffers: "256MB"
    %{ else }
    maxConnections: 200
    sharedBuffers: "1GB"
    %{ endif }
  
  service:
    type: ClusterIP
    port: 5432
    %{ if node_port }
    nodePort: 30432
    %{ endif }

# Dragonfly Configuration
dragonfly:
  enabled: true
  image:
    repository: docker.dragonflydb.io/dragonflydb/dragonfly
    tag: "latest"
    pullPolicy: IfNotPresent
  
  auth:
    password: ${dragonfly_password}
  
  config:
    %{ if environment == "local" }
    maxMemory: "512mb"
    %{ else }
    maxMemory: "3gb"
    %{ endif }
    cacheMode: true
    port: 6379
  
  persistence:
    enabled: true
    %{ if environment == "local" }
    size: 2Gi
    storageClass: "local-path"
    %{ else }
    size: 10Gi
    storageClass: "standard-rwo"
    %{ endif }
    accessModes:
      - ReadWriteOnce
  
  resources:
    %{ if environment == "local" }
    limits:
      cpu: "1"
      memory: "1Gi"
    requests:
      cpu: "0.5"
      memory: "512Mi"
    %{ else }
    limits:
      cpu: "2"
      memory: "4Gi"
    requests:
      cpu: "1"
      memory: "2Gi"
    %{ endif }
  
  service:
    type: ClusterIP
    port: 6379
    %{ if node_port }
    nodePort: 30379
    %{ endif }

# Application Configuration
app:
  enabled: true
  image:
    %{ if environment == "local" }
    repository: localhost:5001/collider
    %{ else }
    repository: ${image_registry}/collider
    %{ endif }
    tag: "latest"
    pullPolicy: IfNotPresent
  
  replicaCount: 1
  
  config:
    environment: ${environment}
    port: 8080
    %{ if environment == "local" }
    rustLog: debug
    %{ else }
    rustLog: info
    %{ endif }
    rustBacktrace: "1"
    jwtSecret: ${jwt_secret}
  
  resources:
    %{ if environment == "local" }
    limits:
      cpu: "1"
      memory: "512Mi"
    requests:
      cpu: "0.5"
      memory: "256Mi"
    %{ else }
    limits:
      cpu: "2"
      memory: "2Gi"
    requests:
      cpu: "1"
      memory: "1Gi"
    %{ endif }
  
  service:
    type: ClusterIP
    port: 8080
    %{ if node_port }
    nodePort: 30080
    %{ endif }
  
  healthcheck:
    enabled: true
    path: /health
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 3
  
  autoscaling:
    %{ if environment == "local" }
    enabled: false
    %{ else }
    enabled: true
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    %{ endif }

# Monitoring Configuration
monitoring:
  enabled: true
  
  prometheus:
    enabled: true
    image:
      repository: prom/prometheus
      tag: "latest"
      pullPolicy: IfNotPresent
    
    persistence:
      enabled: true
      %{ if environment == "local" }
      size: 2Gi
      storageClass: "local-path"
      %{ else }
      size: 20Gi
      storageClass: "standard-rwo"
      %{ endif }
      accessModes:
        - ReadWriteOnce
    
    config:
      retentionTime: "30d"
    
    resources:
      %{ if environment == "local" }
      limits:
        cpu: "1"
        memory: "1Gi"
      requests:
        cpu: "0.5"
        memory: "512Mi"
      %{ else }
      limits:
        cpu: "2"
        memory: "2Gi"
      requests:
        cpu: "1"
        memory: "1Gi"
      %{ endif }
    
    service:
      type: ClusterIP
      port: 9090
      %{ if node_port }
      nodePort: 30090
      %{ endif }
  
  grafana:
    enabled: true
    image:
      repository: grafana/grafana
      tag: "latest"
      pullPolicy: IfNotPresent
    
    auth:
      adminUser: admin
      adminPassword: ${grafana_password}
    
    persistence:
      enabled: true
      %{ if environment == "local" }
      size: 1Gi
      storageClass: "local-path"
      %{ else }
      size: 5Gi
      storageClass: "standard-rwo"
      %{ endif }
      accessModes:
        - ReadWriteOnce
    
    resources:
      %{ if environment == "local" }
      limits:
        cpu: "1"
        memory: "512Mi"
      requests:
        cpu: "0.5"
        memory: "256Mi"
      %{ else }
      limits:
        cpu: "1"
        memory: "1Gi"
      requests:
        cpu: "0.5"
        memory: "512Mi"
      %{ endif }
    
    service:
      type: ClusterIP
      port: 3000
      %{ if node_port }
      nodePort: 30300
      %{ endif }
  
  jaeger:
    enabled: true
    image:
      repository: jaegertracing/all-in-one
      tag: "latest"
      pullPolicy: IfNotPresent
    
    config:
      collectorOtlpEnabled: true
    
    persistence:
      enabled: true
      %{ if environment == "local" }
      size: 1Gi
      storageClass: "local-path"
      %{ else }
      size: 5Gi
      storageClass: "standard-rwo"
      %{ endif }
      accessModes:
        - ReadWriteOnce
    
    resources:
      %{ if environment == "local" }
      limits:
        cpu: "1"
        memory: "512Mi"
      requests:
        cpu: "0.5"
        memory: "256Mi"
      %{ else }
      limits:
        cpu: "1"
        memory: "1Gi"
      requests:
        cpu: "0.5"
        memory: "512Mi"
      %{ endif }
    
    service:
      type: ClusterIP
      ports:
        ui: 16686
        collector: 14268
        udp: 6831
      %{ if node_port }
      nodePorts:
        ui: 30686
        collector: 30268
        udp: 30831
      %{ endif }

# Ingress Configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
  hosts:
    - host: %{ if environment == "local" }localhost%{ else }${external_ip}%{ endif }
      paths:
        - path: /
          pathType: Prefix
          service: app
          port: 8080
        - path: /prometheus
          pathType: Prefix
          service: prometheus
          port: 9090
        - path: /grafana
          pathType: Prefix
          service: grafana
          port: 3000
        - path: /jaeger
          pathType: Prefix
          service: jaeger
          port: 16686
  tls: []

# NodePort Services
nodePort:
  %{ if node_port }
  enabled: true
  services:
    - name: app
      port: 8080
      nodePort: 30080
    - name: prometheus
      port: 9090
      nodePort: 30090
    - name: grafana
      port: 3000
      nodePort: 30300
    - name: jaeger
      port: 16686
      nodePort: 30686
  %{ else }
  enabled: false
  %{ endif }

# Security Configuration
security:
  podSecurityPolicy:
    enabled: false
  networkPolicy:
    %{ if environment == "local" }
    enabled: false
    %{ else }
    enabled: true
    %{ endif }
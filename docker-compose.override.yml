services:
  # Development application server
  app:
    image: collider-app-dev
    build:
      context: .
      dockerfile: Dockerfile
    container_name: collider_app_dev
    environment:
      ENVIRONMENT: development
      PORT: 8880
      RUST_LOG: debug
      RUST_BACKTRACE: "1"
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/postgres
      REDIS_URL: redis://dragonfly:6379
    ports:
      - "8880:8880"
    volumes:
      - .:/app
      - cargo_registry:/usr/local/cargo/registry
      - cargo_target:/app/target
    networks:
      - collider
    depends_on:
      postgres:
        condition: service_healthy
      dragonfly:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8880/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: collider_prometheus_dev
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/config/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - collider

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: collider_grafana_dev
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/config/monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - collider
    depends_on:
      - prometheus


  # Nginx Reverse Proxy (optional, matches production setup)
  nginx:
    image: nginx:alpine
    container_name: collider_nginx_dev
    ports:
      - "80:80"
    volumes:
      - ./infrastructure/config/configs/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - collider
    profiles:
      - full  # Only start with --profile full

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  cargo_registry:
    driver: local
  cargo_target:
    driver: local
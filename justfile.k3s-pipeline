#!/usr/bin/env just --justfile

# K3S mega pipeline justfile for comprehensive testing and benchmarking workflows in Kubernetes
# Usage: just -f justfile.k3s-pipeline <recipe>

# Default recipe
default:
    @just --list

# ==== K3S Mega Pipeline ====

# Complete K3S workflow: test → coverage → K3S deploy → seed → all benchmarks
k3s-pipeline:
    #!/usr/bin/env bash
    set -e
    echo "🚀 Starting K3S Mega Pipeline - Complete Test & Benchmark Workflow on Kubernetes"
    echo "================================================================================"
    
    # Create results directory with timestamp
    TIMESTAMP=$(date +%Y%m%d_%H%M%S)
    RESULTS_DIR="k3s_pipeline_results/mega_pipeline_$TIMESTAMP"
    mkdir -p "$RESULTS_DIR"
    
    echo "📁 Results will be saved to: $RESULTS_DIR"
    
    # Phase 1: Pre-deployment Testing + Coverage
    echo ""
    echo "🧪 Phase 1: Pre-deployment Testing + Coverage"
    echo "============================================="
    
    echo "Starting test environment..."
    docker-compose -f docker-compose.test.yml up -d
    docker-compose -f docker-compose.test.yml run --rm wait-for-services
    
    echo "Setting up test database..."
    DATABASE_URL="postgresql://postgres:postgres@localhost:5433/postgres" \
    cargo run --bin migrator -- up
    
    echo "Running comprehensive tests with coverage..."
    DATABASE_URL="postgres://postgres:postgres@localhost:5433/postgres" \
    REDIS_URL="redis://localhost:6380" \
    cargo tarpaulin --all --out Html --out Json --output-dir "$RESULTS_DIR" --timeout 180
    
    echo "Shutting down test environment..."
    docker-compose -f docker-compose.test.yml down -v
    
    # Phase 2: K3S Cluster Setup
    echo ""
    echo "☸️  Phase 2: K3S Cluster Deployment"
    echo "=================================="
    
    echo "Creating K3D cluster..."
    cd infrastructure
    just deploy-local
    cd ..
    
    echo "Waiting for cluster to be fully ready..."
    kubectl wait --for=condition=ready pod --all -n collider --timeout=300s
    
    # Verify deployment
    kubectl get pods -n collider
    
    # Phase 3: Database Setup & Seeding
    echo ""
    echo "🌱 Phase 3: Database Setup & Seeding"
    echo "===================================="
    
    echo "Running migrations in K3S..."
    kubectl exec -n collider deployment/collider-app -- /app/migrator up || {
        echo "Direct migration failed, trying with port-forward..."
        kubectl port-forward -n collider svc/postgres 5432:5432 &
        PF_PID=$!
        sleep 5
        DATABASE_URL="postgres://postgres:gcp-local-password@localhost:5432/postgres" \
        cargo run --bin migrator -- up
        kill $PF_PID 2>/dev/null || true
    }
    
    echo "Seeding database with performance test data..."
    kubectl port-forward -n collider svc/postgres 5432:5432 &
    PF_PID=$!
    sleep 5
    
    DATABASE_URL="postgres://postgres:gcp-local-password@localhost:5432/postgres" \
    cargo run --bin seeder -- all --min-users 5000 --max-users 10000 --target-events 1000000
    
    kill $PF_PID 2>/dev/null || true
    
    # Wait for application to be ready
    echo "Waiting for application to be ready..."
    until curl -f http://localhost:30080/health &>/dev/null; do
        echo "  Waiting for K3S app..."
        sleep 10
    done
    echo "✅ K3S Application ready!"
    
    # Phase 4: K3S-based Benchmarking
    echo ""
    echo "📊 Phase 4: K3S-based Comprehensive Benchmarking"
    echo "=============================================="
    
    # Start K3S monitoring
    {
        echo "Starting K3S performance monitoring..."
        while true; do
            echo "=== $(date) ===" >> "$RESULTS_DIR/k3s_monitor.log"
            kubectl top nodes >> "$RESULTS_DIR/k3s_monitor.log" 2>/dev/null || echo "Node metrics unavailable" >> "$RESULTS_DIR/k3s_monitor.log"
            kubectl top pods -n collider >> "$RESULTS_DIR/k3s_monitor.log" 2>/dev/null || echo "Pod metrics unavailable" >> "$RESULTS_DIR/k3s_monitor.log"
            kubectl get pods -n collider -o wide >> "$RESULTS_DIR/k3s_monitor.log"
            echo "" >> "$RESULTS_DIR/k3s_monitor.log"
            sleep 15
        done
    } &
    MONITOR_PID=$!
    
    # Run comprehensive benchmarks against K3S deployment
    {
        echo "🔬 Running Criterion benchmarks against K3S (localhost:30080)..."
        # Update target to K3S NodePort
        sed -i.bak 's/localhost:8080/localhost:30080/g' benchmarks/benches/*.rs || true
        cargo bench --package collider-benchmarks 2>&1
        # Restore original target
        sed -i.bak 's/localhost:30080/localhost:8080/g' benchmarks/benches/*.rs || true
        rm benchmarks/benches/*.rs.bak 2>/dev/null || true
        
        echo ""
        echo "🚀 Running K6 load tests against K3S..."
        docker run --rm --add-host host.docker.internal:host-gateway \
            -v $(pwd)/infrastructure/benchmarking/k6:/scripts \
            grafana/k6:latest run /scripts/load-test.js \
            -e BASE_URL=http://host.docker.internal:30080 2>&1 || echo "K6 test completed with warnings"
        
        echo ""
        echo "🦆 Running Goose load tests against K3S..."
        cd infrastructure/benchmarking
        timeout 300s cargo run --bin goose_load_test -- --host http://localhost:30080 2>&1 || echo "Goose test completed/timed out"
        cd ../..
        
        echo ""
        echo "⚡ Running Vegeta tests against K3S..."
        echo "GET http://localhost:30080/health" > /tmp/vegeta_targets.txt
        echo "GET http://localhost:30080/api/v1/users" >> /tmp/vegeta_targets.txt
        echo "GET http://localhost:30080/api/v1/events" >> /tmp/vegeta_targets.txt
        vegeta attack -targets=/tmp/vegeta_targets.txt -duration=60s -rate=100 | vegeta report 2>&1 || echo "Vegeta test completed"
        rm /tmp/vegeta_targets.txt 2>/dev/null || true
        
        echo ""
        echo "🔍 K3S Specific Performance Analysis..."
        echo "=== Cluster Resource Usage ==="
        kubectl describe nodes
        echo ""
        echo "=== Pod Resource Usage ==="
        kubectl describe pods -n collider
        
    } | tee "$RESULTS_DIR/k3s_benchmark_output.log"
    
    # Stop monitoring
    kill $MONITOR_PID 2>/dev/null || true
    
    # Phase 5: K3S Performance Analysis
    echo ""
    echo "📈 Phase 5: K3S Performance Analysis"
    echo "===================================="
    
    # Collect K3S metrics
    echo "Collecting K3S application metrics..."
    curl -s http://localhost:30080/metrics > "$RESULTS_DIR/k3s_app_metrics.txt" 2>/dev/null || echo "Metrics not available"
    
    # Collect Prometheus metrics if available
    echo "Collecting Prometheus metrics..."
    curl -s http://localhost:30090/api/v1/query?query=up > "$RESULTS_DIR/prometheus_metrics.json" 2>/dev/null || echo "Prometheus not available"
    
    # K3S cluster state
    echo "Collecting cluster state..."
    kubectl get all -n collider -o wide > "$RESULTS_DIR/cluster_state.txt"
    kubectl describe pods -n collider > "$RESULTS_DIR/pod_descriptions.txt"
    
    # Resource usage
    kubectl top nodes > "$RESULTS_DIR/final_node_usage.txt" 2>/dev/null || echo "Metrics server not available" > "$RESULTS_DIR/final_node_usage.txt"
    kubectl top pods -n collider > "$RESULTS_DIR/final_pod_usage.txt" 2>/dev/null || echo "Pod metrics not available" > "$RESULTS_DIR/final_pod_usage.txt"
    
    echo ""
    echo "✅ K3S Mega Pipeline Complete!"
    echo "============================="
    echo "📁 Results directory: $RESULTS_DIR"
    echo "📊 Coverage report: $RESULTS_DIR/tarpaulin-report.html"
    echo "📈 K3S benchmark output: $RESULTS_DIR/k3s_benchmark_output.log"
    echo "📋 K3S monitoring: $RESULTS_DIR/k3s_monitor.log"
    echo "☸️  Cluster state: $RESULTS_DIR/cluster_state.txt"
    echo ""
    echo "🔧 K3S environment is still running:"
    echo "   Application: http://localhost:30080"
    echo "   Prometheus: http://localhost:30090"
    echo "   Grafana: http://localhost:30300"
    echo "   Database: localhost:30432"
    echo "   Cache: localhost:30379"
    echo ""
    echo "Use 'just -f justfile.k3s-pipeline stop-k3s' to shut down cluster"

# Stop K3S cluster
stop-k3s:
    cd infrastructure && just destroy-local
    @echo "✅ K3S cluster destroyed"

# Quick K3S pipeline (reduced scope)
quick-k3s-pipeline:
    #!/usr/bin/env bash
    set -e
    echo "⚡ Quick K3S Pipeline - Fast Test & Benchmark Workflow"
    echo "====================================================="
    
    TIMESTAMP=$(date +%Y%m%d_%H%M%S)
    RESULTS_DIR="k3s_pipeline_results/quick_pipeline_$TIMESTAMP"
    mkdir -p "$RESULTS_DIR"
    
    # Quick tests
    echo "🧪 Running quick tests..."
    docker-compose -f docker-compose.test.yml up -d
    docker-compose -f docker-compose.test.yml run --rm wait-for-services
    
    DATABASE_URL="postgres://postgres:postgres@localhost:5433/postgres" \
    REDIS_URL="redis://localhost:6380" \
    cargo test --all | tee "$RESULTS_DIR/test_output.log"
    
    docker-compose -f docker-compose.test.yml down -v
    
    # Quick K3S deployment
    echo "☸️  Deploying to K3S..."
    cd infrastructure
    just deploy-local
    cd ..
    
    kubectl wait --for=condition=ready pod --all -n collider --timeout=180s
    
    # Quick benchmarks
    echo "📊 Running quick benchmarks against K3S..."
    {
        timeout 120s cargo bench --package collider-benchmarks -- --sample-size 10 --measurement-time 5 2>&1 || echo "Benchmarks completed/timed out"
        
        echo ""
        echo "Quick load test..."
        timeout 60s vegeta attack -targets=<(echo "GET http://localhost:30080/health") -duration=30s -rate=50 | vegeta report 2>&1 || echo "Load test completed"
        
    } | tee "$RESULTS_DIR/quick_k3s_benchmark.log"
    
    echo "✅ Quick K3S Pipeline Complete! Results in: $RESULTS_DIR"

# K3S benchmark-only pipeline
k3s-benchmark-pipeline:
    #!/usr/bin/env bash
    set -e
    echo "📊 K3S Benchmark Pipeline - Performance Testing on Kubernetes"
    echo "==========================================================="
    
    TIMESTAMP=$(date +%Y%m%d_%H%M%S)
    RESULTS_DIR="k3s_pipeline_results/benchmarks_$TIMESTAMP"
    mkdir -p "$RESULTS_DIR"
    
    # Ensure K3S is running
    if ! kubectl get pods -n collider &>/dev/null; then
        echo "K3S cluster not found, deploying..."
        cd infrastructure
        just deploy-local
        cd ..
        kubectl wait --for=condition=ready pod --all -n collider --timeout=300s
    fi
    
    # Seed with performance data
    echo "Setting up performance test data..."
    kubectl port-forward -n collider svc/postgres 5432:5432 &
    PF_PID=$!
    sleep 5
    
    DATABASE_URL="postgres://postgres:gcp-local-password@localhost:5432/postgres" \
    cargo run --bin seeder -- all --min-users 10000 --max-users 20000 --target-events 2000000
    
    kill $PF_PID 2>/dev/null || true
    
    # Wait for app
    until curl -f http://localhost:30080/health &>/dev/null; do
        sleep 5
    done
    
    # Comprehensive K3S benchmarks
    {
        echo "=== K3S Cluster Info ==="
        kubectl get nodes -o wide
        kubectl get pods -n collider -o wide
        
        echo ""
        echo "=== Criterion Benchmarks (K3S) ==="
        cargo bench --package collider-benchmarks
        
        echo ""
        echo "=== K6 Stress Testing (K3S) ==="
        docker run --rm --add-host host.docker.internal:host-gateway \
            -v $(pwd)/infrastructure/benchmarking/k6:/scripts \
            grafana/k6:latest run /scripts/scenarios/spike-test.js \
            -e BASE_URL=http://host.docker.internal:30080
        
        echo ""
        echo "=== Extended Load Testing (K3S) ==="
        timeout 600s vegeta attack \
            -targets=<(echo -e "GET http://localhost:30080/health\nGET http://localhost:30080/api/v1/users\nGET http://localhost:30080/api/v1/events") \
            -duration=300s -rate=200 | vegeta report
        
        echo ""
        echo "=== Resource Analysis ==="
        kubectl top nodes || echo "Node metrics unavailable"
        kubectl top pods -n collider || echo "Pod metrics unavailable"
        
    } | tee "$RESULTS_DIR/k3s_comprehensive_benchmarks.log"
    
    # Collect final metrics
    curl -s http://localhost:30080/metrics > "$RESULTS_DIR/k3s_app_metrics.txt" || true
    kubectl get events -n collider --sort-by='.lastTimestamp' > "$RESULTS_DIR/k3s_events.txt"
    kubectl describe pods -n collider > "$RESULTS_DIR/k3s_pod_details.txt"
    
    echo "✅ K3S comprehensive benchmarking complete!"
    echo "📁 Results: $RESULTS_DIR"

# Load testing specific for K3S
k3s-load-test duration="300s" rate="100" users="1000":
    #!/usr/bin/env bash
    set -e
    echo "🚀 K3S Load Testing - {{duration}} at {{rate}} RPS with {{users}} users"
    echo "=================================================================="
    
    TIMESTAMP=$(date +%Y%m%d_%H%M%S)
    RESULTS_DIR="k3s_pipeline_results/load_test_$TIMESTAMP"
    mkdir -p "$RESULTS_DIR"
    
    # Ensure cluster is ready
    until curl -f http://localhost:30080/health &>/dev/null; do
        echo "Waiting for K3S application..."
        sleep 5
    done
    
    # Monitoring in background
    {
        while true; do
            echo "=== $(date) ===" >> "$RESULTS_DIR/load_test_monitor.log"
            kubectl top nodes >> "$RESULTS_DIR/load_test_monitor.log" 2>/dev/null || true
            kubectl top pods -n collider >> "$RESULTS_DIR/load_test_monitor.log" 2>/dev/null || true
            echo "" >> "$RESULTS_DIR/load_test_monitor.log"
            sleep 10
        done
    } &
    MONITOR_PID=$!
    
    # Load testing
    {
        echo "Starting load test: {{duration}} duration, {{rate}} rate, {{users}} users"
        echo ""
        
        # Vegeta test
        echo "=== Vegeta Load Test ==="
        vegeta attack \
            -targets=<(echo -e "GET http://localhost:30080/api/v1/users\nGET http://localhost:30080/api/v1/events\nPOST http://localhost:30080/api/v1/events\nContent-Type: application/json\n\n{\"event_type_id\":1,\"user_id\":1,\"data\":{\"test\":true}}") \
            -duration={{duration}} -rate={{rate}} | vegeta report
        
        echo ""
        echo "=== K6 Load Test ==="
        docker run --rm --add-host host.docker.internal:host-gateway \
            -v $(pwd)/infrastructure/benchmarking/k6:/scripts \
            -e USERS={{users}} -e DURATION={{duration}} \
            grafana/k6:latest run /scripts/scenarios/endurance-test.js \
            -e BASE_URL=http://host.docker.internal:30080
        
    } | tee "$RESULTS_DIR/load_test_results.log"
    
    kill $MONITOR_PID 2>/dev/null || true
    
    # Final state
    kubectl get events -n collider --sort-by='.lastTimestamp' | tail -20 > "$RESULTS_DIR/final_events.txt"
    
    echo "✅ K3S load testing complete!"
    echo "📁 Results: $RESULTS_DIR"

# Performance regression testing for K3S
k3s-regression-test baseline_dir:
    #!/usr/bin/env bash
    set -e
    echo "🔍 K3S Regression Testing - Performance Regression Detection"
    echo "=========================================================="
    
    TIMESTAMP=$(date +%Y%m%d_%H%M%S)
    RESULTS_DIR="k3s_pipeline_results/regression_$TIMESTAMP"
    mkdir -p "$RESULTS_DIR"
    
    # Run current K3S benchmarks
    just -f justfile.k3s-pipeline k3s-benchmark-pipeline
    
    # Basic regression analysis
    if [ -d "{{baseline_dir}}" ]; then
        echo "📊 Comparing K3S performance with baseline: {{baseline_dir}}"
        
        echo "=== K3S Performance Regression Analysis ===" > "$RESULTS_DIR/k3s_regression_analysis.txt"
        echo "Baseline: {{baseline_dir}}" >> "$RESULTS_DIR/k3s_regression_analysis.txt"
        echo "Current: k3s_pipeline_results/benchmarks_*" >> "$RESULTS_DIR/k3s_regression_analysis.txt"
        echo "Timestamp: $(date)" >> "$RESULTS_DIR/k3s_regression_analysis.txt"
        echo "" >> "$RESULTS_DIR/k3s_regression_analysis.txt"
        
        # Compare file sizes and key metrics
        echo "Benchmark result sizes:" >> "$RESULTS_DIR/k3s_regression_analysis.txt"
        du -sh {{baseline_dir}}/* >> "$RESULTS_DIR/k3s_regression_analysis.txt" 2>/dev/null || true
        echo "---" >> "$RESULTS_DIR/k3s_regression_analysis.txt"
        du -sh k3s_pipeline_results/benchmarks_*/* >> "$RESULTS_DIR/k3s_regression_analysis.txt" 2>/dev/null || true
        
        echo "✅ K3S regression analysis complete!"
        echo "📋 Analysis: $RESULTS_DIR/k3s_regression_analysis.txt"
    else
        echo "⚠️  Baseline directory not found: {{baseline_dir}}"
    fi

# Status check for K3S pipeline
k3s-status:
    @echo "☸️  K3S Pipeline Status"
    @echo "====================="
    @kubectl cluster-info 2>/dev/null && echo "✅ Cluster: Connected" || echo "❌ Cluster: Not available"
    @kubectl get pods -n collider 2>/dev/null && echo "✅ Collider namespace: Available" || echo "❌ Collider namespace: Not found"
    @curl -s http://localhost:30080/health &>/dev/null && echo "✅ Application: Healthy" || echo "❌ Application: Not responding"
    @echo ""
    @echo "Endpoints:"
    @echo "  App: http://localhost:30080"
    @echo "  Prometheus: http://localhost:30090"
    @echo "  Grafana: http://localhost:30300"

# Clean K3S pipeline results
clean:
    rm -rf k3s_pipeline_results/
    rm -rf target/criterion/
    @echo "✅ All K3S pipeline results cleaned"

# Show K3S pipeline results
results:
    @echo "📊 K3S Pipeline Results"
    @echo "======================"
    @find k3s_pipeline_results -name "*.log" -o -name "*.html" -o -name "*.json" -o -name "*.txt" 2>/dev/null | head -20 || echo "No results found"
    @echo ""
    @echo "Latest results:"
    @ls -la k3s_pipeline_results/ 2>/dev/null | tail -10 || echo "No K3S pipeline results directory"

# Help for K3S pipeline commands
help:
    @echo "☸️  Collider K3S Pipeline Commands"
    @echo "=================================="
    @echo ""
    @echo "Main Pipelines:"
    @echo "  just -f justfile.k3s-pipeline k3s-pipeline         # Complete K3S workflow (3-4 hours)"
    @echo "  just -f justfile.k3s-pipeline quick-k3s-pipeline   # Fast K3S workflow (15-20 min)"
    @echo ""
    @echo "Specialized Pipelines:"
    @echo "  just -f justfile.k3s-pipeline k3s-benchmark-pipeline # K3S benchmarking only"
    @echo "  just -f justfile.k3s-pipeline k3s-load-test         # Load testing specific"
    @echo "  just -f justfile.k3s-pipeline k3s-regression-test DIR # Compare with baseline"
    @echo ""
    @echo "Utilities:"
    @echo "  just -f justfile.k3s-pipeline k3s-status           # Check K3S status"
    @echo "  just -f justfile.k3s-pipeline stop-k3s             # Destroy K3S cluster"
    @echo "  just -f justfile.k3s-pipeline results              # Show available results"
    @echo "  just -f justfile.k3s-pipeline clean                # Clean all results"
    @echo ""
    @echo "Load Testing Parameters:"
    @echo "  just -f justfile.k3s-pipeline k3s-load-test 600s 200 2000  # 10min, 200 RPS, 2000 users"
    @echo ""
    @echo "Examples:"
    @echo "  just -f justfile.k3s-pipeline k3s-pipeline"
    @echo "  just -f justfile.k3s-pipeline k3s-regression-test k3s_pipeline_results/benchmarks_20240101_120000"
    @echo "  just -f justfile.k3s-pipeline k3s-load-test 300s 500 5000"
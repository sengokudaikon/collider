name: Build and Deploy to GCP

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: ${{ secrets.GCP_REGION }}
  SERVICE: collider
  REGION: ${{ secrets.GCP_REGION }}

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Google Auth
      id: auth
      uses: 'google-github-actions/auth@v2'
      with:
        token_format: 'access_token'
        workload_identity_provider: '${{ secrets.WIF_PROVIDER }}'
        service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}'

    - name: Docker Auth
      id: docker-auth
      uses: 'docker/login-action@v3'
      with:
        username: 'oauth2accesstoken'
        password: '${{ steps.auth.outputs.access_token }}'
        registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'

    - name: Build Docker Image
      run: |-
        docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/collider/server:${{ github.sha }}" .
        docker tag "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/collider/server:${{ github.sha }}" "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/collider/server:latest"

    - name: Push Docker Image
      run: |-
        docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/collider/server:${{ github.sha }}"
        docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/collider/server:latest"

    - name: Deploy to Cloud Run
      id: deploy
      uses: google-github-actions/deploy-cloudrun@v2
      with:
        service: ${{ env.SERVICE }}
        region: ${{ env.REGION }}
        image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/collider/server:${{ github.sha }}
        env_vars: |
          ENVIRONMENT=production
          PORT=8880
          RUST_LOG=info
        secrets: |
          DATABASE_URL=collider-database-url:latest
          REDIS_URL=collider-dragonfly-url:latest

    - name: Show Output
      run: echo ${{ steps.deploy.outputs.url }}